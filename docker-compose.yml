services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - app
    networks:
      - booking_network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking_network
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - booking_network
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_beat
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.celery_app.celery_app beat --loglevel=info
    networks:
      - booking_network
  flower:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: flower
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.celery_app.celery_app flower --loglevel=info
    ports:
      - "5555:5555"
    networks:
      - booking_network
  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: shop_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booking_network
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart_booking
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking_network
      
volumes:
  postgres_data:

networks:
  booking_network:
    driver: bridge